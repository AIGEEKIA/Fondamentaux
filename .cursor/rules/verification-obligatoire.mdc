# ‚úÖ V√âRIFICATION OBLIGATOIRE - AVANT MODIFICATION

## üéØ **CHECKLIST DE V√âRIFICATION**

### **1. V√âRIFICATION ARCHITECTURE**

#### **Structure de Projet**
- [ ] **App Router** : Utilisation de Next.js 13+ App Router
- [ ] **Layout** : Layout principal dans `app/layout.tsx`
- [ ] **Pages** : Pages dans `app/[section]/page.tsx`
- [ ] **Composants** : Composants dans `components/`
- [ ] **Utilitaires** : Fonctions dans `lib/utils.ts`
- [ ] **Assets** : Images dans `public/`

#### **Stack Technique**
- [ ] **Next.js 15.4.5** : Version correcte
- [ ] **React 18** : Avec Concurrent Features
- [ ] **TypeScript 5** : Typage statique
- [ ] **Tailwind CSS 3.3.0** : Framework CSS
- [ ] **shadcn/ui** : Composants UI
- [ ] **Lucide React** : Ic√¥nes

### **2. V√âRIFICATION DESIGN**

#### **Palette de Couleurs**
- [ ] **Introduction** : `blue-500/10` ‚Üí `blue-600/10`
- [ ] **Analogies** : `blue-100` ‚Üí `blue-100`
- [ ] **D√©finition** : `green-500/10` ‚Üí `emerald-500/10`
- [ ] **Exemples Code** : `orange-500/10` ‚Üí `red-500/10`
- [ ] **Mini-Application** : `blue-500/10` ‚Üí `indigo-500/10`
- [ ] **Quiz** : `purple-500/10` ‚Üí `indigo-500/10`
- [ ] **Navigation** : `gray-500/10` ‚Üí `gray-600/10`

#### **Composants Obligatoires**
- [ ] **Cards** : Avec gradients et bordures
- [ ] **Boutons** : Avec hover effects et transitions
- [ ] **Code Blocks** : Avec syntax highlighting
- [ ] **Navigation** : Avec breadcrumbs
- [ ] **Responsive** : Mobile-first design

### **3. V√âRIFICATION P√âDAGOGIE**

#### **Structure de Le√ßon (7 √âtapes)**
- [ ] **En-t√™te** : Titre, description, badges
- [ ] **Objectifs** : 3 objectifs avec CheckCircle
- [ ] **Analogies** : 3 analogies c√¥te √† c√¥te
- [ ] **D√©finition Simple** : Explication + **Bout de code structurel obligatoire**
- [ ] **Exemples** : Code c√¥te √† c√¥te (JS, Python, TS)
- [ ] **Mini-App** : Instructions et code ex√©cutable
- [ ] **Quiz** : 5 quiz avec feedback
- [ ] **Navigation** : Liens pr√©c√©dent/suivant

#### **Contenu P√©dagogique**
- [ ] **Langage simple** : Accessible aux d√©butants
- [ ] **Analogies concr√®tes** : Relier √† la vie r√©elle
- [ ] **Exemples pratiques** : Code fonctionnel
- [ ] **Progression logique** : Du simple au complexe

### **4. V√âRIFICATION CODE**

#### **Conventions de Nommage**
- [ ] **Composants** : PascalCase (`UserProfile`)
- [ ] **Fonctions** : camelCase (`calculateTotal`)
- [ ] **Constantes** : UPPER_SNAKE_CASE (`API_BASE_URL`)
- [ ] **Types** : PascalCase (`UserData`)
- [ ] **Fichiers** : kebab-case (`user-profile.tsx`)

#### **Structure de Composant**
```tsx
"use client";

import { useState } from "react";
import { Icon } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

interface ComponentProps {
  title: string;
  description?: string;
}

export default function Component({ title, description }: ComponentProps) {
  const [state, setState] = useState<string>("");

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-100 via-indigo-100 to-blue-100">
      <Card className="bg-gradient-to-br from-blue-500/10 to-blue-600/10 border-2 border-blue-300/50 shadow-xl">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-gray-800">
            {title}
          </CardTitle>
        </CardHeader>
        <CardContent>
          {description}
        </CardContent>
      </Card>
    </div>
  );
}
```

### **5. V√âRIFICATION RESPONSIVE**

#### **Breakpoints Tailwind**
- [ ] **Mobile** : Base styles (320px+)
- [ ] **md** : 768px+
- [ ] **lg** : 1024px+
- [ ] **xl** : 1280px+

#### **Classes Responsive**
- [ ] **Grilles** : `grid md:grid-cols-2 lg:grid-cols-3`
- [ ] **Typographie** : `text-sm md:text-base lg:text-lg`
- [ ] **Espacement** : `p-4 md:p-6 lg:p-8`
- [ ] **Largeurs** : `w-full md:w-auto`

### **6. V√âRIFICATION ACCESSIBILIT√â**

#### **Standards WCAG 2.1 AA**
- [ ] **Contraste** : Minimum 4.5:1 pour le texte
- [ ] **Focus** : Tous les √©l√©ments interactifs focusables
- [ ] **S√©mantique** : Balises HTML appropri√©es
- [ ] **Alternatives** : Textes alternatifs pour images

#### **Impl√©mentation**
```tsx
// Focus visible
<button 
  className="focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
  tabIndex={0}
>

// Textes alternatifs
<Image 
  src="/image.png" 
  alt="Description d√©taill√©e"
  width={100} 
  height={100} 
/>
```

### **7. V√âRIFICATION PERFORMANCE**

#### **Core Web Vitals**
- [ ] **LCP** : < 2.5s (Largest Contentful Paint)
- [ ] **FID** : < 100ms (First Input Delay)
- [ ] **CLS** : < 0.1 (Cumulative Layout Shift)

#### **Optimisations**
- [ ] **Images** : Optimis√©es avec Next.js Image
- [ ] **Lazy Loading** : Composants charg√©s √† la demande
- [ ] **Bundle** : Taille optimis√©e
- [ ] **Caching** : Strat√©gie de cache appropri√©e

### **8. V√âRIFICATION S√âCURIT√â**

#### **Validation des Donn√©es**
- [ ] **Entr√©es utilisateur** : Validation c√¥t√© client
- [ ] **Sanitisation** : Protection contre XSS
- [ ] **Authentification** : Si n√©cessaire
- [ ] **Autorisation** : Contr√¥le d'acc√®s

#### **Bonnes Pratiques**
```typescript
// Validation email
const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

// Sanitisation
import DOMPurify from 'dompurify';
const sanitizeInput = (input: string): string => {
  return DOMPurify.sanitize(input);
};
```

### **9. V√âRIFICATION TESTS**

#### **Tests Obligatoires**
- [ ] **Tests unitaires** : Avec Jest et Testing Library
- [ ] **Tests d'int√©gration** : Flux utilisateur
- [ ] **Tests E2E** : Avec Playwright ou Cypress
- [ ] **Tests d'accessibilit√©** : Avec axe-core

#### **Exemple de Test**
```typescript
import { render, screen } from '@testing-library/react';
import Component from './Component';

describe('Component', () => {
  it('renders correctly', () => {
    render(<Component title="Test" />);
    expect(screen.getByText('Test')).toBeInTheDocument();
  });
});
```

### **10. V√âRIFICATION DOCUMENTATION**

#### **README.md**
- [ ] **Description** : Projet clairement expliqu√©
- [ ] **Technologies** : Stack technique list√©e
- [ ] **Installation** : Instructions d'installation
- [ ] **Usage** : Comment utiliser le projet
- [ ] **Contribution** : Guidelines pour contribuer

#### **Documentation Technique**
- [ ] **Architecture** : Diagrammes et explications
- [ ] **API** : Documentation des endpoints
- [ ] **Composants** : Props et utilisation
- [ ] **D√©ploiement** : Instructions de mise en production

### **11. V√âRIFICATION D√âPLOIEMENT**

#### **Environnements**
- [ ] **Development** : `npm run dev`
- [ ] **Staging** : Tests et validation
- [ ] **Production** : Optimis√© et s√©curis√©

#### **CI/CD**
- [ ] **Tests automatiques** : √Ä chaque commit
- [ ] **Build** : V√©rification du build
- [ ] **D√©ploiement** : Automatis√©
- [ ] **Monitoring** : Surveillance en production

### **12. CHECKLIST FINALE**

#### **Avant Commit**
- [ ] **Linting** : `npm run lint` passe
- [ ] **Tests** : `npm run test` passe
- [ ] **Build** : `npm run build` r√©ussit
- [ ] **TypeScript** : Aucune erreur de type
- [ ] **Accessibilit√©** : Tests axe-core passent

#### **Avant D√©ploiement**
- [ ] **Performance** : Core Web Vitals OK
- [ ] **S√©curit√©** : Scan de vuln√©rabilit√©s
- [ ] **Responsive** : Test sur tous les devices
- [ ] **Cross-browser** : Test sur Chrome, Firefox, Safari
- [ ] **Mobile** : Test sur iOS et Android

---

## üö® **R√àGLES CRITIQUES - JAMAIS VIOLER**

### **‚ùå INTERDICTIONS ABSOLUES**

1. **Pas de code non typ√©** : TypeScript obligatoire
2. **Pas de CSS inline** : Tailwind CSS uniquement
3. **Pas de console.log en production** : Logger appropri√©
4. **Pas de donn√©es sensibles en frontend** : API s√©curis√©e
5. **Pas de composants non accessibles** : WCAG 2.1 AA
6. **Pas de code non test√©** : Tests obligatoires
7. **Pas de documentation manquante** : README complet
8. **Pas de performance d√©grad√©e** : Core Web Vitals

### **‚úÖ OBLIGATIONS ABSOLUES**

1. **Structure de le√ßon** : 7 √©tapes respect√©es
2. **D√©finition Simple** : Explication + code structurel
3. **Design coh√©rent** : Palette de couleurs respect√©e
4. **Responsive** : Mobile-first design
5. **Accessibilit√©** : Standards WCAG respect√©s
6. **Performance** : Core Web Vitals optimaux
7. **S√©curit√©** : Validation et sanitisation
8. **Tests** : Couverture de tests appropri√©e

---

**Note** : Cette v√©rification DOIT √™tre effectu√©e AVANT chaque modification pour maintenir la qualit√© et la coh√©rence du projet.
description:
globs:
alwaysApply: false
---
