# üåç R√àGLES UNIVERSELLES - TOUS PROJETS

## üéØ **PRINCIPES FONDAMENTAUX**

### **1. ARCHITECTURE OBLIGATOIRE**

#### **Structure de Projet Standardis√©e**

```
projet/
‚îú‚îÄ‚îÄ app/                    # App Router Next.js 13+
‚îÇ   ‚îú‚îÄ‚îÄ page.tsx           # Page d'accueil
‚îÇ   ‚îú‚îÄ‚îÄ layout.tsx         # Layout principal
‚îÇ   ‚îî‚îÄ‚îÄ globals.css        # Styles globaux
‚îú‚îÄ‚îÄ components/             # Composants r√©utilisables
‚îÇ   ‚îú‚îÄ‚îÄ ui/                # Composants shadcn/ui
‚îÇ   ‚îî‚îÄ‚îÄ [nom].tsx          # Composants personnalis√©s
‚îú‚îÄ‚îÄ lib/                   # Utilitaires
‚îÇ   ‚îî‚îÄ‚îÄ utils.ts           # Fonctions utilitaires
‚îú‚îÄ‚îÄ public/                # Assets statiques
‚îú‚îÄ‚îÄ documentation/          # Documentation technique
‚îî‚îÄ‚îÄ .cursor/rules/         # R√®gles Cursor
```

#### **Stack Technique Universelle**

- ‚úÖ **Next.js 15.4.5** : Framework React moderne
- ‚úÖ **React 18** : Biblioth√®que UI avec Concurrent Features
- ‚úÖ **TypeScript 5** : Typage statique obligatoire
- ‚úÖ **Tailwind CSS 3.3.0** : Framework CSS utility-first
- ‚úÖ **shadcn/ui** : Syst√®me de composants professionnels
- ‚úÖ **Radix UI** : Composants primitifs accessibles
- ‚úÖ **Lucide React** : Ic√¥nes modernes

### **2. STANDARDS DE CODE OBLIGATOIRES**

#### **Conventions de Nommage**

```typescript
// Composants : PascalCase
const UserProfile = () => {};

// Fonctions : camelCase
const calculateTotal = () => {};

// Constantes : UPPER_SNAKE_CASE
const API_BASE_URL = "https://api.example.com";

// Types/Interfaces : PascalCase
interface UserData {}
type ApiResponse = {};

// Fichiers : kebab-case
user - profile.tsx;
api - client.ts;
```

#### **Structure de Composant Standard**

```tsx
"use client";

import { useState } from "react";
import { Icon1, Icon2 } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";

interface ComponentProps {
  title: string;
  description?: string;
  children?: React.ReactNode;
}

export default function Component({
  title,
  description,
  children,
}: ComponentProps) {
  const [state, setState] = useState<string>("");

  const handleAction = () => {
    // Logique du composant
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-100 via-indigo-100 to-blue-100">
      <Card className="bg-gradient-to-br from-blue-500/10 to-blue-600/10 border-2 border-blue-300/50 shadow-xl">
        <CardHeader>
          <CardTitle className="text-2xl font-bold text-gray-800">
            {title}
          </CardTitle>
        </CardHeader>
        <CardContent>{children}</CardContent>
      </Card>
    </div>
  );
}
```

### **3. P√âDAGOGIE OBLIGATOIRE**

#### **Structure de Le√ßon (7 √âtapes)**

Chaque le√ßon DOIT suivre cette structure :

1. **En-t√™te de Le√ßon** : Titre, description, badges personnalis√©s
2. **Objectifs du Cours** : 3 objectifs avec ic√¥nes CheckCircle
3. **Analogies Simples** : 3 analogies c√¥te √† c√¥te avec hover effects
4. **D√©finition Simple** : Explication claire du concept + **Bout de code structurel obligatoire**
5. **Exemples de Code** : Code c√¥te √† c√¥te pour 3 langages (JS, Python, TS)
6. **Mini-Application** : Instructions et code ex√©cutable
7. **Quiz Interactifs** : 5 quiz avec feedback imm√©diat
8. **Navigation** : Liens vers le√ßons pr√©c√©dente/suivante

#### **Contenu P√©dagogique**

- ‚úÖ **Explications simples** : Langage accessible
- ‚úÖ **Analogies concr√®tes** : Relier √† la vie r√©elle
- ‚úÖ **Exemples pratiques** : Code fonctionnel
- ‚úÖ **Progression logique** : Du simple au complexe

### **4. DESIGN SYSTEM UNIVERSEL**

#### **Palette de Couleurs par Section**

- **Introduction** : `blue-500/10` ‚Üí `blue-600/10`
- **Analogies** : `blue-100` ‚Üí `blue-100`
- **D√©finition** : `green-500/10` ‚Üí `emerald-500/10`
- **Exemples Code** : `orange-500/10` ‚Üí `red-500/10`
- **Mini-Application** : `blue-500/10` ‚Üí `indigo-500/10`
- **Quiz** : `purple-500/10` ‚Üí `indigo-500/10`
- **Navigation** : `gray-500/10` ‚Üí `gray-600/10`

#### **Composants Obligatoires**

```tsx
// Cards avec gradients
<Card className="bg-gradient-to-br from-[color]-500/10 to-[color]-600/10 border-2 border-[color]-300/50 shadow-xl">

// Boutons interactifs
<button className="flex items-center gap-2 bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors">

// Code blocks
<div className="bg-gray-900 rounded-lg p-6">
  <pre className="text-green-400 font-mono text-sm">
    <code>{codeContent}</code>
  </pre>
</div>
```

### **5. RESPONSIVE DESIGN OBLIGATOIRE**

#### **Mobile First Approach**

```css
/* Base styles (mobile) */
.container {
  padding: 1rem;
}

/* md: (768px+) */
@media (min-width: 768px) {
  .container {
    padding: 1.5rem;
  }
}

/* lg: (1024px+) */
@media (min-width: 1024px) {
  .container {
    padding: 2rem;
  }
}
```

#### **Classes Responsive Standard**

- `grid md:grid-cols-2 lg:grid-cols-3` pour les grilles
- `text-sm md:text-base lg:text-lg` pour la typographie
- `p-4 md:p-6 lg:p-8` pour les espacements
- `w-full md:w-auto` pour les largeurs

### **6. PERFORMANCE ET OPTIMISATION**

#### **Core Web Vitals**

- ‚úÖ **LCP** : < 2.5s (Largest Contentful Paint)
- ‚úÖ **FID** : < 100ms (First Input Delay)
- ‚úÖ **CLS** : < 0.1 (Cumulative Layout Shift)

#### **Optimisations Next.js**

```tsx
// Images optimis√©es
import Image from "next/image";

<Image
  src="/image.png"
  alt="Description"
  width={100}
  height={100}
  priority={true} // Pour les images above the fold
/>;

// Lazy loading des composants
import dynamic from "next/dynamic";

const LazyComponent = dynamic(() => import("./Component"), {
  loading: () => <div className="animate-pulse bg-gray-200 h-32 rounded"></div>,
});
```

### **7. ACCESSIBILIT√â OBLIGATOIRE**

#### **Standards WCAG 2.1 AA**

- **Contraste** : Minimum 4.5:1 pour le texte normal
- **Navigation** : Tous les √©l√©ments interactifs focusables
- **S√©mantique** : Utilisation correcte des balises HTML
- **Alternatives** : Textes alternatifs pour les images

#### **Impl√©mentation**

```tsx
// Focus visible
<button
  className="focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
  tabIndex={0}
>

// Textes alternatifs
<Image
  src="/image.png"
  alt="Description d√©taill√©e de l'image"
  width={100}
  height={100}
/>

// Labels pour les formulaires
<label htmlFor="email" className="sr-only">Email</label>
<input id="email" type="email" aria-describedby="email-help" />
```

### **8. S√âCURIT√â ET BONNES PRATIQUES**

#### **Validation des Donn√©es**

```typescript
// Validation c√¥t√© client
const validateEmail = (email: string): boolean => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

// Sanitisation des entr√©es
import DOMPurify from "dompurify";

const sanitizeInput = (input: string): string => {
  return DOMPurify.sanitize(input);
};
```

#### **Gestion des Erreurs**

```tsx
// Error boundaries
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  render() {
    if (this.state.hasError) {
      return <h1>Something went wrong.</h1>;
    }

    return this.props.children;
  }
}
```

### **9. TESTS ET QUALIT√â**

#### **Tests Obligatoires**

```typescript
// Tests unitaires avec Jest
import { render, screen } from "@testing-library/react";
import Component from "./Component";

describe("Component", () => {
  it("renders correctly", () => {
    render(<Component title="Test" />);
    expect(screen.getByText("Test")).toBeInTheDocument();
  });
});
```

#### **Linting et Formatting**

```json
// .eslintrc.json
{
  "extends": ["next/core-web-vitals", "@typescript-eslint/recommended"],
  "rules": {
    "no-unused-vars": "error",
    "prefer-const": "error"
  }
}
```

### **10. DOCUMENTATION OBLIGATOIRE**

#### **README.md Standard**

````markdown
# Nom du Projet

## Description

Br√®ve description du projet

## Technologies

- Next.js 15.4.5
- React 18
- TypeScript 5
- Tailwind CSS 3.3.0

## Installation

```bash
npm install
npm run dev
```
````

## Structure

Description de l'architecture

## Contribution

Guidelines pour contribuer

````

#### **Documentation Technique**

- ‚úÖ **Architecture** : Diagrammes et explications
- ‚úÖ **API** : Documentation des endpoints
- ‚úÖ **Composants** : Props et utilisation
- ‚úÖ **D√©ploiement** : Instructions de mise en production

### **11. D√âPLOIEMENT ET CI/CD**

#### **Environnements**

- **Development** : `npm run dev`
- **Staging** : Tests et validation
- **Production** : Optimis√© et s√©curis√©

#### **Pipeline CI/CD**

```yaml
# .github/workflows/deploy.yml
name: Deploy
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - run: npm ci
      - run: npm run build
      - run: npm run test
````

### **12. MAINTENANCE ET √âVOLUTION**

#### **Versioning Semantic**

- **Major** : Changements breaking
- **Minor** : Nouvelles fonctionnalit√©s
- **Patch** : Corrections de bugs

#### **Monitoring**

- ‚úÖ **Performance** : Core Web Vitals
- ‚úÖ **Erreurs** : Error tracking
- ‚úÖ **Analytics** : Comportement utilisateur
- ‚úÖ **Uptime** : Disponibilit√© du service

---

**Note** : Ces r√®gles s'appliquent √† TOUS les projets pour maintenir la coh√©rence, la qualit√© et la maintenabilit√© du code.
description:
globs:
alwaysApply: false

---
