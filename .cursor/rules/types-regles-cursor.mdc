# üìã TYPES DE R√àGLES CURSOR - CLASSIFICATION

## üéØ **CAT√âGORIES DE R√àGLES**

### **1. R√àGLES UNIVERSELLES** üåç

#### **Description**
R√®gles qui s'appliquent √† TOUS les projets, peu importe le domaine ou la technologie.

#### **Exemples**
- Standards de code (TypeScript, conventions de nommage)
- Architecture (Next.js App Router, structure de projet)
- Design system (Tailwind CSS, composants)
- Performance (Core Web Vitals, optimisations)
- Accessibilit√© (WCAG 2.1 AA)

#### **Fichiers**
- `standards-universels.mdc`
- `verification-obligatoire.mdc`

### **2. R√àGLES DE DESIGN** üé®

#### **Description**
R√®gles sp√©cifiques √† l'interface utilisateur, l'exp√©rience utilisateur et la coh√©rence visuelle.

#### **Exemples**
- Palette de couleurs par section
- Composants UI (Cards, boutons, code blocks)
- Responsive design (mobile-first)
- Animations et transitions
- Typographie et espacement

#### **Fichiers**
- `standards-design.mdc`

### **3. R√àGLES DE PROJET** üìÅ

#### **Description**
R√®gles sp√©cifiques √† un projet particulier, incluant les contraintes m√©tier et les exigences fonctionnelles.

#### **Exemples**
- Structure p√©dagogique (7 √©tapes)
- Contenu sp√©cifique au domaine
- Fonctionnalit√©s m√©tier
- Int√©grations particuli√®res

#### **Fichiers**
- `projets/formation-dev-codeur.mdc`
- `projets/flexibilite-contenu.mdc`
- `projets/template-creation.mdc`

### **4. R√àGLES DE LANGAGE** üî§

#### **Description**
R√®gles sp√©cifiques √† un langage de programmation ou une technologie particuli√®re.

#### **Exemples**
- Conventions JavaScript/TypeScript
- Bonnes pratiques Python
- Patterns React/Next.js
- Optimisations sp√©cifiques

#### **Fichiers**
- `langages/javascript-typescript.mdc`

## üìä **HI√âRARCHIE DES R√àGLES**

### **Niveau 1 : Universelles** (Priorit√© MAXIMALE)
```
standards-universels.mdc
verification-obligatoire.mdc
```

### **Niveau 2 : Design** (Priorit√© √âLEV√âE)
```
standards-design.mdc
```

### **Niveau 3 : Projet** (Priorit√© MOYENNE)
```
projets/formation-dev-codeur.mdc
projets/flexibilite-contenu.mdc
projets/template-creation.mdc
```

### **Niveau 4 : Langage** (Priorit√© SP√âCIFIQUE)
```
langages/javascript-typescript.mdc
```

## üîÑ **ORDRE D'APPLICATION**

### **1. V√©rification Obligatoire** ‚úÖ
```mdc
# Toujours v√©rifier AVANT modification
verification-obligatoire.mdc
```

### **2. Standards Universels** üåç
```mdc
# Appliquer √† tous les projets
standards-universels.mdc
```

### **3. Standards Design** üé®
```mdc
# Coh√©rence visuelle obligatoire
standards-design.mdc
```

### **4. R√®gles Projet** üìÅ
```mdc
# Sp√©cificit√©s du projet
projets/[nom-projet].mdc
```

### **5. R√®gles Langage** üî§
```mdc
# Optimisations sp√©cifiques
langages/[langage].mdc
```

## üìù **FORMAT DES FICHIERS**

### **Structure Standard**
```markdown
# üéØ TITRE PRINCIPAL

## üéØ **SECTION PRINCIPALE**

### **1. SOUS-SECTION**

#### **D√©tail**

- ‚úÖ **Point positif**
- ‚ùå **Point n√©gatif**

#### **Exemple de Code**

```tsx
// Code d'exemple
const example = () => {
  return "Hello World";
};
```

### **2. AUTRE SOUS-SECTION**

---

**Note** : Explication importante
```

### **M√©tadonn√©es Cursor**
```markdown
description: Description du fichier
globs: Patterns de fichiers concern√©s
alwaysApply: true/false
---
```

## üéØ **R√àGLES DE CONTENU**

### **1. R√àGLES OBLIGATOIRES** ‚ö†Ô∏è

#### **Format**
- **Titre** : Emoji + nom clair
- **Sections** : Num√©rot√©es (1, 2, 3...)
- **Sous-sections** : Avec ####
- **Code** : Avec syntax highlighting
- **Notes** : En bas avec ---

#### **Contenu**
- ‚úÖ **Explications claires** : Langage simple
- ‚úÖ **Exemples concrets** : Code fonctionnel
- ‚úÖ **Checklists** : Points √† v√©rifier
- ‚úÖ **Interdictions** : Ce qu'il ne faut PAS faire
- ‚úÖ **Obligations** : Ce qu'il faut TOUJOURS faire

### **2. R√àGLES DE STYLE** üé®

#### **Typographie**
- **Titres** : # pour principal, ## pour sections
- **Sous-titres** : ### pour sous-sections
- **D√©tails** : #### pour d√©tails
- **Code** : ``` avec langage sp√©cifi√©
- **Listes** : - pour les points

#### **√âmojis**
- üéØ **Objectif** : Pour les titres principaux
- ‚úÖ **Succ√®s** : Pour les points positifs
- ‚ùå **Erreur** : Pour les points n√©gatifs
- ‚ö†Ô∏è **Attention** : Pour les avertissements
- üí° **Id√©e** : Pour les suggestions
- üîß **Technique** : Pour les d√©tails techniques

### **3. R√àGLES DE CONTENU** üìö

#### **Structure**
1. **Introduction** : Contexte et objectif
2. **D√©finitions** : Concepts cl√©s
3. **Exemples** : Cas concrets
4. **Impl√©mentation** : Comment faire
5. **Validation** : Comment v√©rifier
6. **Conclusion** : R√©sum√© et notes

#### **Qualit√©**
- ‚úÖ **Clart√©** : Explications simples
- ‚úÖ **Concr√©tude** : Exemples pratiques
- ‚úÖ **Compl√©tude** : Tous les cas couverts
- ‚úÖ **Actualit√©** : Informations √† jour
- ‚úÖ **Coh√©rence** : Pas de contradictions

## üîß **OUTILS ET RESSOURCES**

### **1. VALIDATION DES R√àGLES**

#### **Checklist de Validation**
- [ ] **Coh√©rence** : Pas de contradictions
- [ ] **Compl√©tude** : Tous les cas couverts
- [ ] **Clart√©** : Explications compr√©hensibles
- [ ] **Actualit√©** : Informations √† jour
- [ ] **Pratique** : Exemples fonctionnels

#### **Tests de Validation**
```bash
# V√©rifier la syntaxe Markdown
npm run lint:markdown

# V√©rifier la coh√©rence des r√®gles
npm run validate:rules

# Tester les exemples de code
npm run test:examples
```

### **2. MAINTENANCE DES R√àGLES**

#### **Versioning**
```markdown
## Changelog

### v1.2.0 - 2024-01-15
- ‚úÖ Ajout de nouvelles r√®gles d'accessibilit√©
- üîß Am√©lioration des exemples de code
- ‚ùå Correction des erreurs de syntaxe

### v1.1.0 - 2024-01-10
- ‚úÖ Ajout de r√®gles de performance
- üîß Mise √† jour des standards WCAG
```

#### **Mise √† Jour**
- **R√©guli√®re** : V√©rification mensuelle
- **R√©active** : Mise √† jour selon les besoins
- **Document√©e** : Changelog obligatoire
- **Test√©e** : Validation apr√®s modification

## üìà **M√âTRIQUES ET SUIVI**

### **1. INDICATEURS DE QUALIT√â**

#### **Coh√©rence**
- **Contradictions** : 0 tol√©r√©
- **Compl√©tude** : 100% des cas couverts
- **Clart√©** : Score de lisibilit√© > 80%

#### **Efficacit√©**
- **Temps de lecture** : < 10 minutes
- **Compr√©hension** : Test utilisateur > 90%
- **Application** : Taux de respect > 95%

### **2. SUIVI D'UTILISATION**

#### **M√©triques**
- **Consultations** : Nombre de lectures
- **Applications** : Nombre d'utilisations
- **Violations** : Nombre d'infractions
- **Am√©liorations** : Suggestions re√ßues

#### **Feedback**
- **Utilisateurs** : Retours d'exp√©rience
- **D√©veloppeurs** : Suggestions techniques
- **Designers** : Am√©liorations UX
- **Managers** : Efficacit√© business

---

**Note** : Cette classification permet d'organiser et d'appliquer les r√®gles de mani√®re coh√©rente et efficace selon le contexte et les besoins du projet.
description:
globs:
alwaysApply: false
---
