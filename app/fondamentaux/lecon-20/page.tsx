import Link from 'next/link'
import { ArrowLeft, CheckCircle, Search, Shield, Target, Zap } from 'lucide-react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'

export default function Lecon30Page() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-blue-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-4">
              <Link href="/fondamentaux" className="flex items-center space-x-2 text-blue-600 hover:text-blue-700 transition-colors">
                <ArrowLeft className="h-5 w-5" />
                <span>Retour aux fondamentaux</span>
              </Link>
            </div>
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-2">
                <Search className="h-6 w-6 text-blue-600" />
                <span className="text-lg font-semibold text-gray-800">Cours 30</span>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Breadcrumb */}
      <nav className="bg-blue-50 border-b border-blue-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center space-x-2 py-2 text-sm text-blue-600">
            <Link href="/" className="hover:text-blue-700">Accueil</Link>
            <span>/</span>
            <Link href="/fondamentaux" className="hover:text-blue-700">Fondamentaux</Link>
            <span>/</span>
            <span className="text-blue-800 font-medium">Threat Hunting et DevSecOps</span>
          </div>
        </div>
      </nav>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Titre et objectifs */}
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            üîç Threat Hunting et DevSecOps
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Chasser activement les menaces et int√©grer la s√©curit√© dans le d√©veloppement
          </p>
        </div>

        {/* Objectifs */}
        <Card className="mb-8 bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200">
          <CardHeader>
            <CardTitle className="flex items-center gap-2 text-blue-800">
              <CheckCircle className="h-6 w-6" />
              Objectifs du cours
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <h3 className="font-semibold text-blue-700">üîç Threat Hunting</h3>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>‚Ä¢ Hypoth√®ses de menaces</li>
                  <li>‚Ä¢ Analyse proactive</li>
                  <li>‚Ä¢ Investigation forensique</li>
                  <li>‚Ä¢ IOC et TTP</li>
                </ul>
              </div>
              <div className="space-y-2">
                <h3 className="font-semibold text-blue-700">üõ°Ô∏è DevSecOps Practices</h3>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>‚Ä¢ Security as Code</li>
                  <li>‚Ä¢ SAST/DAST/IAST</li>
                  <li>‚Ä¢ Container security</li>
                  <li>‚Ä¢ Compliance automation</li>
                </ul>
              </div>
              <div className="space-y-2">
                <h3 className="font-semibold text-blue-700">ü§ñ Security Automation</h3>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>‚Ä¢ SOAR (Security Orchestration)</li>
                  <li>‚Ä¢ Playbooks automatis√©s</li>
                  <li>‚Ä¢ Incident response</li>
                  <li>‚Ä¢ Threat intelligence</li>
                </ul>
              </div>
              <div className="space-y-2">
                <h3 className="font-semibold text-blue-700">üìä Security Metrics</h3>
                <ul className="text-sm text-gray-600 space-y-1">
                  <li>‚Ä¢ Mean Time to Detection</li>
                  <li>‚Ä¢ Mean Time to Response</li>
                  <li>‚Ä¢ Security ROI</li>
                  <li>‚Ä¢ Risk scoring</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Analogies */}
        <div className="grid md:grid-cols-3 gap-6 mb-8">
          <Card className="bg-gradient-to-br from-green-50 to-emerald-50 border-green-200">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-green-800">
                üïµÔ∏è D√©tective priv√©
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-gray-600">
                Comme un d√©tective qui suit des pistes, analyse des indices et 
                d√©veloppe des hypoth√®ses sur les crimes. Il utilise des techniques 
                avanc√©es pour d√©couvrir ce qui se cache sous la surface.
              </p>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-br from-purple-50 to-pink-50 border-purple-200">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-purple-800">
                üè≠ Usine s√©curis√©e
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-gray-600">
                Comme une usine o√π la s√©curit√© est int√©gr√©e √† chaque √©tape de production. 
                Les contr√¥les qualit√© incluent des v√©rifications de s√©curit√©, et 
                l'automatisation assure la coh√©rence.
              </p>
            </CardContent>
          </Card>

          <Card className="bg-gradient-to-br from-orange-50 to-red-50 border-orange-200">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-orange-800">
                üö® Centre de commandement
              </CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-sm text-gray-600">
                Comme un centre de commandement militaire qui coordonne les op√©rations, 
                analyse les menaces en temps r√©el et d√©ploie automatiquement les 
                ressources appropri√©es.
              </p>
            </CardContent>
          </Card>
        </div>

        {/* Exemples de code */}
        <div className="space-y-6">
          <h2 className="text-2xl font-bold text-gray-800 mb-4">üíª Exemples de code</h2>
          
          <Card>
            <CardHeader>
              <CardTitle className="text-blue-800">Python - Threat Hunting avec YARA</CardTitle>
            </CardHeader>
            <CardContent>
              <pre className="bg-gray-900 text-green-400 p-4 rounded-lg overflow-x-auto text-sm">
{`import yara
import os
import json
from datetime import datetime

class ThreatHunter:
    def __init__(self):
        self.rules = {}
        self.load_yara_rules()
    
    def load_yara_rules(self):
        """Charger les r√®gles YARA pour la d√©tection"""
        rules_dir = "yara_rules/"
        
        for filename in os.listdir(rules_dir):
            if filename.endswith('.yar'):
                rule_path = os.path.join(rules_dir, filename)
                try:
                    self.rules[filename] = yara.compile(rule_path)
                except Exception as e:
                    print(f"Erreur lors du chargement de {filename}: {e}")
    
    def hunt_in_file(self, file_path):
        """Chercher des menaces dans un fichier"""
        results = []
        
        try:
            with open(file_path, 'rb') as f:
                file_content = f.read()
            
            for rule_name, rule in self.rules.items():
                matches = rule.match(data=file_content)
                
                if matches:
                    for match in matches:
                        results.append({
                            'rule': rule_name,
                            'strings': match.strings,
                            'metadata': match.meta,
                            'file': file_path,
                            'timestamp': datetime.now().isoformat()
                        })
        
        except Exception as e:
            print(f"Erreur lors de l'analyse de {file_path}: {e}")
        
        return results
    
    def hunt_in_directory(self, directory_path):
        """Chercher des menaces dans un r√©pertoire"""
        all_results = []
        
        for root, dirs, files in os.walk(directory_path):
            for file in files:
                file_path = os.path.join(root, file)
                results = self.hunt_in_file(file_path)
                all_results.extend(results)
        
        return all_results
    
    def analyze_network_traffic(self, pcap_file):
        """Analyser le trafic r√©seau pour d√©tecter des menaces"""
        import pyshark
        
        threats = []
        cap = pyshark.FileCapture(pcap_file)
        
        for packet in cap:
            # D√©tecter les connexions suspectes
            if hasattr(packet, 'ip'):
                if self.is_suspicious_connection(packet):
                    threats.append({
                        'source': packet.ip.src,
                        'dest': packet.ip.dst,
                        'protocol': packet.transport_layer,
                        'timestamp': packet.sniff_timestamp
                    })
        
        return threats
    
    def is_suspicious_connection(self, packet):
        """D√©terminer si une connexion est suspecte"""
        suspicious_ips = [
            '192.168.1.100',  # IP suspecte
            '10.0.0.50'       # IP suspecte
        ]
        
        if hasattr(packet, 'ip'):
            return packet.ip.src in suspicious_ips or packet.ip.dst in suspicious_ips
        
        return False

# Exemple d'utilisation
hunter = ThreatHunter()

# Chercher dans un fichier
results = hunter.hunt_in_file('suspicious_file.exe')
print(f"D√©tect√© {len(results)} menaces dans le fichier")

# Chercher dans un r√©pertoire
all_threats = hunter.hunt_in_directory('/path/to/scan')
print(f"D√©tect√© {len(all_threats)} menaces au total")

# Analyser le trafic r√©seau
network_threats = hunter.analyze_network_traffic('capture.pcap')
print(f"D√©tect√© {len(network_threats)} connexions suspectes")`}
              </pre>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="text-blue-800">JavaScript - DevSecOps Pipeline</CardTitle>
            </CardHeader>
            <CardContent>
              <pre className="bg-gray-900 text-green-400 p-4 rounded-lg overflow-x-auto text-sm">
{`// Pipeline DevSecOps avec GitHub Actions
const yaml = require('js-yaml');

class DevSecOpsPipeline {
  constructor() {
    this.securityTools = {
      sast: ['sonarqube', 'semgrep'],
      dast: ['zap', 'burp'],
      iast: ['contrast', 'appscan'],
      container: ['trivy', 'snyk']
    };
  }
  
  generateSecurityPipeline() {
    const pipeline = {
      name: 'Security Pipeline',
      on: ['push', 'pull_request'],
      jobs: {
        'security-scan': {
          'runs-on': 'ubuntu-latest',
          steps: [
            {
              name: 'Checkout code',
              uses: 'actions/checkout@v3'
            },
            {
              name: 'SAST Scan',
              uses: 'github/codeql-action/init@v2',
              with: {
                languages: 'javascript'
              }
            },
            {
              name: 'Run CodeQL Analysis',
              uses: 'github/codeql-action/analyze@v2'
            },
            {
              name: 'Container Security Scan',
              run: |
                docker run --rm -v $(pwd):/app aquasec/trivy fs /app
            },
            {
              name: 'Dependency Check',
              run: |
                npm audit
                npm audit fix
            }
          ]
        },
        'compliance-check': {
          'runs-on': 'ubuntu-latest',
          needs: 'security-scan',
          steps: [
            {
              name: 'Check Compliance',
              run: |
                # V√©rifier les politiques de s√©curit√©
                ./scripts/compliance-check.sh
            }
          ]
        }
      }
    };
    
    return yaml.dump(pipeline);
  }
  
  // Int√©gration de la s√©curit√© dans le code
  generateSecurityHooks() {
    return {
      preCommit: [
        'npm run lint:security',
        'npm run test:security',
        'git-secrets --scan'
      ],
      prePush: [
        'npm audit',
        'npm run build:security'
      ]
    };
  }
  
  // Monitoring de s√©curit√©
  generateSecurityMonitoring() {
    return {
      metrics: [
        'vulnerabilities_detected',
        'mean_time_to_fix',
        'security_test_coverage',
        'compliance_score'
      ],
      alerts: [
        {
          name: 'High Severity Vulnerability',
          condition: 'severity == "high"',
          action: 'notify_security_team'
        },
        {
          name: 'Compliance Violation',
          condition: 'compliance_score < 0.8',
          action: 'block_deployment'
        }
      ]
    };
  }
}

// Exemple d'utilisation
const pipeline = new DevSecOpsPipeline();

// G√©n√©rer le pipeline de s√©curit√©
const yamlPipeline = pipeline.generateSecurityPipeline();
console.log('Pipeline de s√©curit√©:', yamlPipeline);

// Configurer les hooks de s√©curit√©
const hooks = pipeline.generateSecurityHooks();
console.log('Hooks de s√©curit√©:', hooks);

// Configurer le monitoring
const monitoring = pipeline.generateSecurityMonitoring();
console.log('Monitoring de s√©curit√©:', monitoring);`}
              </pre>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle className="text-blue-800">TypeScript - SOAR Platform</CardTitle>
            </CardHeader>
            <CardContent>
              <pre className="bg-gray-900 text-green-400 p-4 rounded-lg overflow-x-auto text-sm">
{`interface SecurityIncident {
  id: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  type: string;
  description: string;
  timestamp: Date;
  indicators: string[];
  status: 'open' | 'investigating' | 'resolved';
}

interface Playbook {
  id: string;
  name: string;
  triggers: string[];
  actions: PlaybookAction[];
  conditions: PlaybookCondition[];
}

interface PlaybookAction {
  type: 'block_ip' | 'quarantine_host' | 'notify_team' | 'create_ticket';
  parameters: Record<string, any>;
}

interface PlaybookCondition {
  field: string;
  operator: 'equals' | 'contains' | 'greater_than';
  value: any;
}

class SOARPlatform {
  private incidents: SecurityIncident[] = [];
  private playbooks: Playbook[] = [];
  
  // D√©tecter et cr√©er un incident
  detectIncident(alert: any): SecurityIncident {
    const incident: SecurityIncident = {
      id: this.generateIncidentId(),
      severity: this.calculateSeverity(alert),
      type: alert.type,
      description: alert.description,
      timestamp: new Date(),
      indicators: alert.indicators || [],
      status: 'open'
    };
    
    this.incidents.push(incident);
    this.triggerPlaybooks(incident);
    
    return incident;
  }
  
  // D√©clencher les playbooks appropri√©s
  private triggerPlaybooks(incident: SecurityIncident): void {
    for (const playbook of this.playbooks) {
      if (this.shouldTriggerPlaybook(playbook, incident)) {
        this.executePlaybook(playbook, incident);
      }
    }
  }
  
  // V√©rifier si un playbook doit √™tre d√©clench√©
  private shouldTriggerPlaybook(playbook: Playbook, incident: SecurityIncident): boolean {
    return playbook.triggers.some(trigger => 
      incident.type.includes(trigger) || 
      incident.description.includes(trigger)
    );
  }
  
  // Ex√©cuter un playbook
  private async executePlaybook(playbook: Playbook, incident: SecurityIncident): Promise<void> {
    console.log(\`Ex√©cution du playbook: \${playbook.name}\`);
    
    for (const action of playbook.actions) {
      if (this.evaluateConditions(playbook.conditions, incident)) {
        await this.executeAction(action, incident);
      }
    }
  }
  
  // √âvaluer les conditions d'un playbook
  private evaluateConditions(conditions: PlaybookCondition[], incident: SecurityIncident): boolean {
    return conditions.every(condition => {
      const value = this.getFieldValue(condition.field, incident);
      
      switch (condition.operator) {
        case 'equals':
          return value === condition.value;
        case 'contains':
          return String(value).includes(String(condition.value));
        case 'greater_than':
          return Number(value) > Number(condition.value);
        default:
          return false;
      }
    });
  }
  
  // Ex√©cuter une action
  private async executeAction(action: PlaybookAction, incident: SecurityIncident): Promise<void> {
    switch (action.type) {
      case 'block_ip':
        await this.blockIP(incident.indicators);
        break;
      case 'quarantine_host':
        await this.quarantineHost(incident.indicators);
        break;
      case 'notify_team':
        await this.notifySecurityTeam(incident);
        break;
      case 'create_ticket':
        await this.createTicket(incident);
        break;
    }
  }
  
  // Actions de s√©curit√©
  private async blockIP(ips: string[]): Promise<void> {
    console.log(\`Blocage des IPs: \${ips.join(', ')}\`);
    // Impl√©mentation du blocage d'IP
  }
  
  private async quarantineHost(hosts: string[]): Promise<void> {
    console.log(\`Mise en quarantaine des h√¥tes: \${hosts.join(', ')}\`);
    // Impl√©mentation de la quarantaine
  }
  
  private async notifySecurityTeam(incident: SecurityIncident): Promise<void> {
    console.log(\`Notification de l'√©quipe de s√©curit√© pour l'incident: \${incident.id}\`);
    // Impl√©mentation de la notification
  }
  
  private async createTicket(incident: SecurityIncident): Promise<void> {
    console.log(\`Cr√©ation d'un ticket pour l'incident: \${incident.id}\`);
    // Impl√©mentation de la cr√©ation de ticket
  }
  
  private generateIncidentId(): string {
    return \`INC-\${Date.now()}-\${Math.random().toString(36).substr(2, 9)}\`;
  }
  
  private calculateSeverity(alert: any): 'low' | 'medium' | 'high' | 'critical' {
    // Logique de calcul de la s√©v√©rit√©
    return 'medium';
  }
  
  private getFieldValue(field: string, incident: SecurityIncident): any {
    return (incident as any)[field];
  }
}

// Exemple d'utilisation
const soar = new SOARPlatform();

// D√©tecter un incident
const alert = {
  type: 'malware_detection',
  description: 'Malware detected on host 192.168.1.100',
  indicators: ['192.168.1.100', 'malware_hash_123']
};

const incident = soar.detectIncident(alert);
console.log('Incident cr√©√©:', incident);`}
              </pre>
            </CardContent>
          </Card>
        </div>

        {/* Mini-application concept */}
        <Card className="mt-8 bg-gradient-to-r from-purple-50 to-pink-50 border-purple-200">
          <CardHeader>
            <CardTitle className="text-purple-800">üéØ Mini-application : Plateforme Threat Hunting</CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-700 mb-4">
              Cr√©ez une plateforme compl√®te de threat hunting qui :
            </p>
            <ul className="text-sm text-gray-600 space-y-2">
              <li>‚Ä¢ Analyse les logs en temps r√©el</li>
              <li>‚Ä¢ D√©tecte les patterns suspects</li>
              <li>‚Ä¢ G√©n√®re des hypoth√®ses de menaces</li>
              <li>‚Ä¢ Automatise les investigations</li>
              <li>‚Ä¢ Int√®gre avec les outils de s√©curit√©</li>
              <li>‚Ä¢ Fournit des rapports d√©taill√©s</li>
            </ul>
          </CardContent>
        </Card>

        {/* Navigation */}
        <div className="flex justify-between mt-8 pt-6 border-t border-gray-200">
                      <Link 
              href="/fondamentaux/lecon-19" 
              className="flex items-center gap-2 text-blue-600 hover:text-blue-700 transition-colors"
            >
              <ArrowLeft className="h-4 w-4" />
              Cours pr√©c√©dent
            </Link>
            <Link 
              href="/fondamentaux" 
              className="flex items-center gap-2 text-blue-600 hover:text-blue-700 transition-colors"
            >
              Retour aux fondamentaux
              <ArrowLeft className="h-4 w-4 rotate-180" />
            </Link>
        </div>
      </div>
    </div>
  )
} 